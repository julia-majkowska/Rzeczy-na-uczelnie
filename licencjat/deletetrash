x->wypisz();
        br_vert<T>* child = (x->left_son()->is_null) ? x->right_son() : x->left_son();
        if(x->is_root()){
            this->root = child;
            delete x;
            return;
        }
        cout<<"Root case done"<<endl;
        br_vert<T>*par = x->parent();
        x->get_disowned();
        child->hook_onto(par);
        if(x->is_red()) return;
        if(child->is_red()){
            child->color = BLACK;
            return;
        }
        delete x;
        x = child; 
        cout<<"Replaced with child"<<endl; 
        while(!x->is_root()){
            
            br_vert<T>* brother = x->brother();
            if(brother -> is_red()){
                //case2
                cout<<"case2"<<endl; 
                x->parent()->color = RED;
                brother -> color = BLACK;
                if(brother->is_left()) brother->rotate_right();
                else brother->rotate_left();
                cout<<"rotated"<<endl;
                if(brother->is_root()) root = brother;
                
            }
            //case 3
            brother = x->brother();
            x->parent() -> wypisz();
            cout<<endl;
            if(x->parent()->is_black() && brother->is_black() && brother->left_son()->is_black() && brother->right_son()->is_black()){
                cout<<"case3"<<endl; 
                brother->color = RED;
                x=x->parent();
                continue;
            }
            //case 4
            if(x->parent()->is_red() && brother->is_black() && brother->left_son()->is_black() && brother->right_son()->is_black()){
                cout<<"case4"<<endl; 
                x->parent()->color=BLACK;
                brother->color=RED;
                break;
            }
            
            //case 5
            if(brother->is_black()){
                brother->color = RED;
                
                cout<<"case5"<<endl; 
                if(x->is_left() && brother->left_son()->is_black()){// brother->right must be red
                    brother->left_son()->color = BLACK;
                    brother->left_son()->rotate_right();
                }
                else if (x->is_right() && brother->right_son()->is_black()){// brother->left must be is_red
                    brother->right_son()->color = BLACK;
                    brother->right_son()->rotate_left();
                    
                }
            }
            brother = x->brother();
            //case 6
            cout<<"case6"<<endl; 
            brother->color = x->parent()->color;
            x->parent()->color = BLACK;
            if(x->is_left()){
                brother->right_son()->color = BLACK;
                brother->rotate_left();
            }
            else{
                brother->left_son()->color = BLACK;
                brother->rotate_right();
            }
        }
        if(x->is_root()) this -> root = x; 